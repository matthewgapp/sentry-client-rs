/*
 * API Reference
 *
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ResolveAnEventId200ResponseEvent {
    #[serde(rename = "_meta")]
    pub _meta: Box<crate::models::ResolveAnEventId200ResponseEventMeta>,
    #[serde(rename = "context")]
    pub context: Box<crate::models::ResolveAnEventId200ResponseEventContext>,
    #[serde(rename = "contexts")]
    pub contexts: serde_json::Value,
    #[serde(rename = "dateCreated")]
    pub date_created: String,
    #[serde(rename = "dateReceived")]
    pub date_received: String,
    #[serde(rename = "dist", deserialize_with = "Option::deserialize")]
    pub dist: Option<String>,
    #[serde(rename = "entries")]
    pub entries: Vec<crate::models::ResolveAnEventId200ResponseEventEntriesInner>,
    #[serde(rename = "errors")]
    pub errors: Vec<crate::models::ResolveAnEventId200ResponseEventErrorsInner>,
    #[serde(rename = "eventID")]
    pub event_id: String,
    #[serde(rename = "fingerprints")]
    pub fingerprints: Vec<String>,
    #[serde(rename = "groupID")]
    pub group_id: String,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "message")]
    pub message: String,
    #[serde(rename = "metadata")]
    pub metadata: Box<crate::models::ResolveAnEventId200ResponseEventMetadata>,
    #[serde(rename = "packages")]
    pub packages: Box<crate::models::ResolveAnEventId200ResponseEventPackages>,
    #[serde(rename = "platform")]
    pub platform: String,
    #[serde(rename = "sdk", deserialize_with = "Option::deserialize")]
    pub sdk: Option<serde_json::Value>,
    #[serde(rename = "size")]
    pub size: i32,
    #[serde(rename = "tags")]
    pub tags: Vec<crate::models::ResolveAnEventId200ResponseEventTagsInner>,
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(rename = "user", deserialize_with = "Option::deserialize")]
    pub user: Option<Box<crate::models::ResolveAnEventId200ResponseEventUser>>,
    #[serde(rename = "title")]
    pub title: String,
}

impl ResolveAnEventId200ResponseEvent {
    pub fn new(
        _meta: crate::models::ResolveAnEventId200ResponseEventMeta,
        context: crate::models::ResolveAnEventId200ResponseEventContext,
        contexts: serde_json::Value,
        date_created: String,
        date_received: String,
        dist: Option<String>,
        entries: Vec<crate::models::ResolveAnEventId200ResponseEventEntriesInner>,
        errors: Vec<crate::models::ResolveAnEventId200ResponseEventErrorsInner>,
        event_id: String,
        fingerprints: Vec<String>,
        group_id: String,
        id: String,
        message: String,
        metadata: crate::models::ResolveAnEventId200ResponseEventMetadata,
        packages: crate::models::ResolveAnEventId200ResponseEventPackages,
        platform: String,
        sdk: Option<serde_json::Value>,
        size: i32,
        tags: Vec<crate::models::ResolveAnEventId200ResponseEventTagsInner>,
        r#type: String,
        user: Option<crate::models::ResolveAnEventId200ResponseEventUser>,
        title: String,
    ) -> ResolveAnEventId200ResponseEvent {
        ResolveAnEventId200ResponseEvent {
            _meta: Box::new(_meta),
            context: Box::new(context),
            contexts,
            date_created,
            date_received,
            dist,
            entries,
            errors,
            event_id,
            fingerprints,
            group_id,
            id,
            message,
            metadata: Box::new(metadata),
            packages: Box::new(packages),
            platform,
            sdk,
            size,
            tags,
            r#type,
            user: if let Some(x) = user {
                Some(Box::new(x))
            } else {
                None
            },
            title,
        }
    }
}
