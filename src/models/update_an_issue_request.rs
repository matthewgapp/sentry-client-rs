/*
 * API Reference
 *
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct UpdateAnIssueRequest {
    /// The new status for the issues. Valid values are `\"resolved\"`, `\"resolvedInNextRelease\"`, `\"unresolved\"`, and `\"ignored\"`.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// The actor id (or username) of the user or team that should be assigned to this issue.
    #[serde(rename = "assignedTo", skip_serializing_if = "Option::is_none")]
    pub assigned_to: Option<String>,
    /// In case this API call is invoked with a user context this allows changing of the flag that indicates if the user has seen the event.
    #[serde(rename = "hasSeen", skip_serializing_if = "Option::is_none")]
    pub has_seen: Option<bool>,
    /// In case this API call is invoked with a user context this allows changing of the bookmark flag.
    #[serde(rename = "isBookmarked", skip_serializing_if = "Option::is_none")]
    pub is_bookmarked: Option<bool>,
    #[serde(rename = "isSubscribed", skip_serializing_if = "Option::is_none")]
    pub is_subscribed: Option<bool>,
    /// Sets the issue to public or private.
    #[serde(rename = "isPublic", skip_serializing_if = "Option::is_none")]
    pub is_public: Option<bool>,
}

impl UpdateAnIssueRequest {
    pub fn new() -> UpdateAnIssueRequest {
        UpdateAnIssueRequest {
            status: None,
            assigned_to: None,
            has_seen: None,
            is_bookmarked: None,
            is_subscribed: None,
            is_public: None,
        }
    }
}


