/*
 * API Reference
 *
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ListAProjectSEvents200ResponseInner {
    #[serde(rename = "eventID")]
    pub event_id: String,
    #[serde(rename = "tags")]
    pub tags: Vec<crate::models::ListAProjectSEvents200ResponseInnerTagsInner>,
    #[serde(rename = "dateCreated")]
    pub date_created: String,
    #[serde(rename = "user", deserialize_with = "Option::deserialize")]
    pub user: Option<Box<crate::models::ResolveAnEventId200ResponseEventUser>>,
    #[serde(rename = "message")]
    pub message: String,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "platform")]
    pub platform: String,
    #[serde(rename = "event.type")]
    pub event_period_type: String,
    #[serde(rename = "groupID")]
    pub group_id: String,
    #[serde(rename = "title")]
    pub title: String,
}

impl ListAProjectSEvents200ResponseInner {
    pub fn new(event_id: String, tags: Vec<crate::models::ListAProjectSEvents200ResponseInnerTagsInner>, date_created: String, user: Option<crate::models::ResolveAnEventId200ResponseEventUser>, message: String, id: String, platform: String, event_period_type: String, group_id: String, title: String) -> ListAProjectSEvents200ResponseInner {
        ListAProjectSEvents200ResponseInner {
            event_id,
            tags,
            date_created,
            user: if let Some(x) = user {Some(Box::new(x))} else {None},
            message,
            id,
            platform,
            event_period_type,
            group_id,
            title,
        }
    }
}


