/*
 * API Reference
 *
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RetrieveAProject200ResponseOptions {
    #[serde(rename = "feedback:branding", skip_serializing_if = "Option::is_none")]
    pub feedback_colon_branding: Option<bool>,
    #[serde(
        rename = "filters:blacklisted_ips",
        skip_serializing_if = "Option::is_none"
    )]
    pub filters_colon_blacklisted_ips: Option<String>,
    #[serde(
        rename = "filters:error_messages",
        skip_serializing_if = "Option::is_none"
    )]
    pub filters_colon_error_messages: Option<String>,
    #[serde(rename = "filters:releases", skip_serializing_if = "Option::is_none")]
    pub filters_colon_releases: Option<String>,
    #[serde(
        rename = "sentry:csp_ignored_sources",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentry_colon_csp_ignored_sources: Option<String>,
    #[serde(
        rename = "sentry:csp_ignored_sources_defaults",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentry_colon_csp_ignored_sources_defaults: Option<bool>,
    #[serde(
        rename = "sentry:reprocessing_active",
        skip_serializing_if = "Option::is_none"
    )]
    pub sentry_colon_reprocessing_active: Option<bool>,
}

impl RetrieveAProject200ResponseOptions {
    pub fn new() -> RetrieveAProject200ResponseOptions {
        RetrieveAProject200ResponseOptions {
            feedback_colon_branding: None,
            filters_colon_blacklisted_ips: None,
            filters_colon_error_messages: None,
            filters_colon_releases: None,
            sentry_colon_csp_ignored_sources: None,
            sentry_colon_csp_ignored_sources_defaults: None,
            sentry_colon_reprocessing_active: None,
        }
    }
}
