/*
 * API Reference
 *
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RetrieveAnOrganization200ResponseProjectsInner {
    #[serde(rename = "dateCreated")]
    pub date_created: String,
    #[serde(rename = "firstEvent", deserialize_with = "Option::deserialize")]
    pub first_event: Option<String>,
    #[serde(rename = "hasAccess")]
    pub has_access: bool,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "isBookmarked")]
    pub is_bookmarked: bool,
    #[serde(rename = "isMember")]
    pub is_member: bool,
    #[serde(rename = "latestDeploys", deserialize_with = "Option::deserialize")]
    pub latest_deploys: Option<String>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "platform", deserialize_with = "Option::deserialize")]
    pub platform: Option<String>,
    #[serde(rename = "platforms")]
    pub platforms: Vec<String>,
    #[serde(rename = "slug")]
    pub slug: String,
    #[serde(rename = "team", deserialize_with = "Option::deserialize")]
    pub team: Option<Box<crate::models::RetrieveAnOrganization200ResponseProjectsInnerTeam>>,
    #[serde(rename = "teams")]
    pub teams: Vec<crate::models::ListATeamSProjects200ResponseInnerTeam>,
}

impl RetrieveAnOrganization200ResponseProjectsInner {
    pub fn new(date_created: String, first_event: Option<String>, has_access: bool, id: String, is_bookmarked: bool, is_member: bool, latest_deploys: Option<String>, name: String, platform: Option<String>, platforms: Vec<String>, slug: String, team: Option<crate::models::RetrieveAnOrganization200ResponseProjectsInnerTeam>, teams: Vec<crate::models::ListATeamSProjects200ResponseInnerTeam>) -> RetrieveAnOrganization200ResponseProjectsInner {
        RetrieveAnOrganization200ResponseProjectsInner {
            date_created,
            first_event,
            has_access,
            id,
            is_bookmarked,
            is_member,
            latest_deploys,
            name,
            platform,
            platforms,
            slug,
            team: if let Some(x) = team {Some(Box::new(x))} else {None},
            teams,
        }
    }
}


