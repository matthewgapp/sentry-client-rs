/*
 * API Reference
 *
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RetrieveAnEventForAProject200ResponseReleaseOneOf {
    #[serde(rename = "authors")]
    pub authors: Vec<serde_json::Value>,
    #[serde(rename = "commitCount")]
    pub commit_count: i64,
    #[serde(rename = "data")]
    pub data: serde_json::Value,
    #[serde(rename = "dateCreated")]
    pub date_created: String,
    #[serde(rename = "dateReleased", deserialize_with = "Option::deserialize")]
    pub date_released: Option<String>,
    #[serde(rename = "deployCount")]
    pub deploy_count: i64,
    #[serde(rename = "firstEvent", deserialize_with = "Option::deserialize")]
    pub first_event: Option<String>,
    #[serde(rename = "lastCommit", deserialize_with = "Option::deserialize")]
    pub last_commit: Option<serde_json::Value>,
    #[serde(rename = "lastDeploy", deserialize_with = "Option::deserialize")]
    pub last_deploy: Option<Box<crate::models::RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeploy>>,
    #[serde(rename = "lastEvent", deserialize_with = "Option::deserialize")]
    pub last_event: Option<String>,
    #[serde(rename = "newGroups")]
    pub new_groups: i64,
    #[serde(rename = "owner", deserialize_with = "Option::deserialize")]
    pub owner: Option<serde_json::Value>,
    #[serde(rename = "projects")]
    pub projects: Vec<crate::models::RetrieveAProject200ResponseLatestReleaseProjectsInner>,
    #[serde(rename = "ref", deserialize_with = "Option::deserialize")]
    pub r#ref: Option<String>,
    #[serde(rename = "shortVersion")]
    pub short_version: String,
    #[serde(rename = "version")]
    pub version: String,
    #[serde(rename = "url", deserialize_with = "Option::deserialize")]
    pub url: Option<String>,
}

impl RetrieveAnEventForAProject200ResponseReleaseOneOf {
    pub fn new(authors: Vec<serde_json::Value>, commit_count: i64, data: serde_json::Value, date_created: String, date_released: Option<String>, deploy_count: i64, first_event: Option<String>, last_commit: Option<serde_json::Value>, last_deploy: Option<crate::models::RetrieveAnEventForAProject200ResponseReleaseOneOfLastDeploy>, last_event: Option<String>, new_groups: i64, owner: Option<serde_json::Value>, projects: Vec<crate::models::RetrieveAProject200ResponseLatestReleaseProjectsInner>, r#ref: Option<String>, short_version: String, version: String, url: Option<String>) -> RetrieveAnEventForAProject200ResponseReleaseOneOf {
        RetrieveAnEventForAProject200ResponseReleaseOneOf {
            authors,
            commit_count,
            data,
            date_created,
            date_released,
            deploy_count,
            first_event,
            last_commit,
            last_deploy: if let Some(x) = last_deploy {Some(Box::new(x))} else {None},
            last_event,
            new_groups,
            owner,
            projects,
            r#ref,
            short_version,
            version,
            url,
        }
    }
}


