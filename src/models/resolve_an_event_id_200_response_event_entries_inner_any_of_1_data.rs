/*
 * API Reference
 *
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ResolveAnEventId200ResponseEventEntriesInnerAnyOf1Data {
    #[serde(rename = "fragment", deserialize_with = "Option::deserialize")]
    pub fragment: Option<String>,
    #[serde(rename = "cookies", deserialize_with = "Option::deserialize")]
    pub cookies: Option<Vec<Vec<String>>>,
    #[serde(rename = "inferredContentType", deserialize_with = "Option::deserialize")]
    pub inferred_content_type: Option<String>,
    #[serde(rename = "env", deserialize_with = "Option::deserialize")]
    pub env: Option<Box<crate::models::ResolveAnEventId200ResponseEventEntriesInnerAnyOf1DataEnv>>,
    #[serde(rename = "headers")]
    pub headers: Vec<Vec<String>>,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "query")]
    pub query: Vec<Vec<String>>,
    #[serde(rename = "data", deserialize_with = "Option::deserialize")]
    pub data: Option<serde_json::Value>,
    #[serde(rename = "method", deserialize_with = "Option::deserialize")]
    pub method: Option<String>,
}

impl ResolveAnEventId200ResponseEventEntriesInnerAnyOf1Data {
    pub fn new(fragment: Option<String>, cookies: Option<Vec<Vec<String>>>, inferred_content_type: Option<String>, env: Option<crate::models::ResolveAnEventId200ResponseEventEntriesInnerAnyOf1DataEnv>, headers: Vec<Vec<String>>, url: String, query: Vec<Vec<String>>, data: Option<serde_json::Value>, method: Option<String>) -> ResolveAnEventId200ResponseEventEntriesInnerAnyOf1Data {
        ResolveAnEventId200ResponseEventEntriesInnerAnyOf1Data {
            fragment,
            cookies,
            inferred_content_type,
            env: if let Some(x) = env {Some(Box::new(x))} else {None},
            headers,
            url,
            query,
            data,
            method,
        }
    }
}


