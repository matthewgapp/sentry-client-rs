/*
 * API Reference
 *
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ResolveAnEventId200ResponseEventUser {
    #[serde(rename = "username", deserialize_with = "Option::deserialize")]
    pub username: Option<String>,
    #[serde(rename = "name", deserialize_with = "Option::deserialize")]
    pub name: Option<String>,
    #[serde(rename = "ip_address", deserialize_with = "Option::deserialize")]
    pub ip_address: Option<String>,
    #[serde(rename = "email", deserialize_with = "Option::deserialize")]
    pub email: Option<String>,
    #[serde(rename = "data", deserialize_with = "Option::deserialize")]
    pub data: Option<Box<crate::models::ResolveAnEventId200ResponseEventUserData>>,
    #[serde(rename = "id")]
    pub id: String,
}

impl ResolveAnEventId200ResponseEventUser {
    pub fn new(
        username: Option<String>,
        name: Option<String>,
        ip_address: Option<String>,
        email: Option<String>,
        data: Option<crate::models::ResolveAnEventId200ResponseEventUserData>,
        id: String,
    ) -> ResolveAnEventId200ResponseEventUser {
        ResolveAnEventId200ResponseEventUser {
            username,
            name,
            ip_address,
            email,
            data: if let Some(x) = data {
                Some(Box::new(x))
            } else {
                None
            },
            id,
        }
    }
}
