/*
 * API Reference
 *
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct UpdateAnOrganizationSReleaseRequest {
    /// An optional commit reference. This is useful if a tagged version has been provided.
    #[serde(rename = "ref", skip_serializing_if = "Option::is_none")]
    pub r#ref: Option<String>,
    /// A URL that points to the release. This can be the path to an online interface to the source code for instance.
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// An optional date that indicates when the release went live. If not provided the current time is assumed.
    #[serde(rename = "dateReleased", skip_serializing_if = "Option::is_none")]
    pub date_released: Option<String>,
    /// An optional list of commit data to be associated with the release. Commits must include parameters `id` (the sha of the commit), and can optionally include `repository`, `message`, `author_name`, `author_email`, and `timestamp`.
    #[serde(rename = "commits", skip_serializing_if = "Option::is_none")]
    pub commits: Option<Vec<serde_json::Value>>,
    /// An optional way to indicate the start and end commits for each repository included in a release. Head commits must include parameters `repository` and `commit` (the HEAD sha). They can optionally include `previousCommit` (the sha of the HEAD of the previous release), which should be specified if this is the first time you've sent commit data.
    #[serde(rename = "refs", skip_serializing_if = "Option::is_none")]
    pub refs: Option<Vec<serde_json::Value>>,
}

impl UpdateAnOrganizationSReleaseRequest {
    pub fn new() -> UpdateAnOrganizationSReleaseRequest {
        UpdateAnOrganizationSReleaseRequest {
            r#ref: None,
            url: None,
            date_released: None,
            commits: None,
            refs: None,
        }
    }
}


