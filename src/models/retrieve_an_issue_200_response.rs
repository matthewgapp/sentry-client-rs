/*
 * API Reference
 *
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RetrieveAnIssue200Response {
    #[serde(rename = "activity")]
    pub activity: Vec<crate::models::RetrieveAnIssue200ResponseActivityInner>,
    #[serde(rename = "annotations")]
    pub annotations: Vec<String>,
    #[serde(rename = "assignedTo", deserialize_with = "Option::deserialize")]
    pub assigned_to: Option<serde_json::Value>,
    #[serde(rename = "count")]
    pub count: String,
    #[serde(rename = "culprit")]
    pub culprit: String,
    #[serde(rename = "firstRelease", deserialize_with = "Option::deserialize")]
    pub first_release: Option<Box<crate::models::RetrieveAnIssue200ResponseFirstRelease>>,
    #[serde(rename = "firstSeen")]
    pub first_seen: String,
    #[serde(rename = "hasSeen")]
    pub has_seen: bool,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "isBookmarked")]
    pub is_bookmarked: bool,
    #[serde(rename = "isPublic")]
    pub is_public: bool,
    #[serde(rename = "isSubscribed")]
    pub is_subscribed: bool,
    #[serde(rename = "lastRelease", deserialize_with = "Option::deserialize")]
    pub last_release: Option<serde_json::Value>,
    #[serde(rename = "lastSeen")]
    pub last_seen: String,
    #[serde(rename = "level")]
    pub level: String,
    #[serde(rename = "logger", deserialize_with = "Option::deserialize")]
    pub logger: Option<String>,
    #[serde(rename = "metadata")]
    pub metadata: Box<crate::models::ListAProjectSIssues200ResponseInnerMetadata>,
    #[serde(rename = "numComments")]
    pub num_comments: i32,
    #[serde(rename = "participants")]
    pub participants: Vec<serde_json::Value>,
    #[serde(rename = "permalink")]
    pub permalink: String,
    #[serde(rename = "pluginActions")]
    pub plugin_actions: Vec<Vec<String>>,
    #[serde(rename = "pluginContexts")]
    pub plugin_contexts: Vec<String>,
    #[serde(rename = "pluginIssues")]
    pub plugin_issues: Vec<serde_json::Value>,
    #[serde(rename = "project")]
    pub project: Box<crate::models::ListAProjectSIssues200ResponseInnerProject>,
    #[serde(rename = "seenBy")]
    pub seen_by: Vec<serde_json::Value>,
    #[serde(rename = "shareId", deserialize_with = "Option::deserialize")]
    pub share_id: Option<String>,
    #[serde(rename = "shortId")]
    pub short_id: String,
    #[serde(rename = "stats")]
    pub stats: Box<crate::models::RetrieveAnIssue200ResponseStats>,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "statusDetails")]
    pub status_details: serde_json::Value,
    #[serde(rename = "subscriptionDetails", deserialize_with = "Option::deserialize")]
    pub subscription_details: Option<serde_json::Value>,
    #[serde(rename = "tags")]
    pub tags: Vec<serde_json::Value>,
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(rename = "userCount")]
    pub user_count: i32,
    #[serde(rename = "userReportCount")]
    pub user_report_count: i32,
}

impl RetrieveAnIssue200Response {
    pub fn new(activity: Vec<crate::models::RetrieveAnIssue200ResponseActivityInner>, annotations: Vec<String>, assigned_to: Option<serde_json::Value>, count: String, culprit: String, first_release: Option<crate::models::RetrieveAnIssue200ResponseFirstRelease>, first_seen: String, has_seen: bool, id: String, is_bookmarked: bool, is_public: bool, is_subscribed: bool, last_release: Option<serde_json::Value>, last_seen: String, level: String, logger: Option<String>, metadata: crate::models::ListAProjectSIssues200ResponseInnerMetadata, num_comments: i32, participants: Vec<serde_json::Value>, permalink: String, plugin_actions: Vec<Vec<String>>, plugin_contexts: Vec<String>, plugin_issues: Vec<serde_json::Value>, project: crate::models::ListAProjectSIssues200ResponseInnerProject, seen_by: Vec<serde_json::Value>, share_id: Option<String>, short_id: String, stats: crate::models::RetrieveAnIssue200ResponseStats, status: Status, status_details: serde_json::Value, subscription_details: Option<serde_json::Value>, tags: Vec<serde_json::Value>, title: String, r#type: String, user_count: i32, user_report_count: i32) -> RetrieveAnIssue200Response {
        RetrieveAnIssue200Response {
            activity,
            annotations,
            assigned_to,
            count,
            culprit,
            first_release: if let Some(x) = first_release {Some(Box::new(x))} else {None},
            first_seen,
            has_seen,
            id,
            is_bookmarked,
            is_public,
            is_subscribed,
            last_release,
            last_seen,
            level,
            logger,
            metadata: Box::new(metadata),
            num_comments,
            participants,
            permalink,
            plugin_actions,
            plugin_contexts,
            plugin_issues,
            project: Box::new(project),
            seen_by,
            share_id,
            short_id,
            stats: Box::new(stats),
            status,
            status_details,
            subscription_details,
            tags,
            title,
            r#type,
            user_count,
            user_report_count,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "resolved")]
    Resolved,
    #[serde(rename = "unresolved")]
    Unresolved,
    #[serde(rename = "ignored")]
    Ignored,
}

impl Default for Status {
    fn default() -> Status {
        Self::Resolved
    }
}

