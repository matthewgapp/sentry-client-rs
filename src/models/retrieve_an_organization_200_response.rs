/*
 * API Reference
 *
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RetrieveAnOrganization200Response {
    #[serde(rename = "access")]
    pub access: Vec<String>,
    #[serde(rename = "allowSharedIssues")]
    pub allow_shared_issues: bool,
    #[serde(rename = "availableRoles")]
    pub available_roles: Vec<crate::models::RetrieveAnOrganization200ResponseAvailableRolesInner>,
    #[serde(rename = "avatar")]
    pub avatar: Box<crate::models::ListAnOrganizationSTeams200ResponseInnerAvatar>,
    #[serde(rename = "dataScrubber")]
    pub data_scrubber: bool,
    #[serde(rename = "dataScrubberDefaults")]
    pub data_scrubber_defaults: bool,
    #[serde(rename = "dateCreated")]
    pub date_created: String,
    #[serde(rename = "defaultRole")]
    pub default_role: String,
    #[serde(rename = "enhancedPrivacy")]
    pub enhanced_privacy: bool,
    #[serde(rename = "experiments")]
    pub experiments: serde_json::Value,
    #[serde(rename = "features")]
    pub features: Vec<String>,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "isDefault")]
    pub is_default: bool,
    #[serde(rename = "isEarlyAdopter")]
    pub is_early_adopter: bool,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "onboardingTasks")]
    pub onboarding_tasks: Vec<serde_json::Value>,
    #[serde(rename = "openMembership")]
    pub open_membership: bool,
    #[serde(rename = "pendingAccessRequests")]
    pub pending_access_requests: i64,
    #[serde(rename = "projects")]
    pub projects: Vec<crate::models::RetrieveAnOrganization200ResponseProjectsInner>,
    #[serde(rename = "quota")]
    pub quota: serde_json::Value,
    #[serde(rename = "require2FA")]
    pub require2_fa: bool,
    #[serde(rename = "safeFields")]
    pub safe_fields: Vec<String>,
    #[serde(rename = "scrapeJavaScript")]
    pub scrape_java_script: bool,
    #[serde(rename = "scrubIPAddresses")]
    pub scrub_ip_addresses: bool,
    #[serde(rename = "sensitiveFields")]
    pub sensitive_fields: Vec<String>,
    #[serde(rename = "slug")]
    pub slug: String,
    #[serde(rename = "status")]
    pub status: Box<crate::models::RetrieveAnOrganization200ResponseAvailableRolesInner>,
    #[serde(rename = "storeCrashReports")]
    pub store_crash_reports: i64,
    #[serde(rename = "teams")]
    pub teams: Vec<crate::models::CreateANewTeam201Response>,
    #[serde(rename = "trustedRelays")]
    pub trusted_relays: Vec<String>,
}

impl RetrieveAnOrganization200Response {
    pub fn new(
        access: Vec<String>,
        allow_shared_issues: bool,
        available_roles: Vec<crate::models::RetrieveAnOrganization200ResponseAvailableRolesInner>,
        avatar: crate::models::ListAnOrganizationSTeams200ResponseInnerAvatar,
        data_scrubber: bool,
        data_scrubber_defaults: bool,
        date_created: String,
        default_role: String,
        enhanced_privacy: bool,
        experiments: serde_json::Value,
        features: Vec<String>,
        id: String,
        is_default: bool,
        is_early_adopter: bool,
        name: String,
        onboarding_tasks: Vec<serde_json::Value>,
        open_membership: bool,
        pending_access_requests: i64,
        projects: Vec<crate::models::RetrieveAnOrganization200ResponseProjectsInner>,
        quota: serde_json::Value,
        require2_fa: bool,
        safe_fields: Vec<String>,
        scrape_java_script: bool,
        scrub_ip_addresses: bool,
        sensitive_fields: Vec<String>,
        slug: String,
        status: crate::models::RetrieveAnOrganization200ResponseAvailableRolesInner,
        store_crash_reports: i64,
        teams: Vec<crate::models::CreateANewTeam201Response>,
        trusted_relays: Vec<String>,
    ) -> RetrieveAnOrganization200Response {
        RetrieveAnOrganization200Response {
            access,
            allow_shared_issues,
            available_roles,
            avatar: Box::new(avatar),
            data_scrubber,
            data_scrubber_defaults,
            date_created,
            default_role,
            enhanced_privacy,
            experiments,
            features,
            id,
            is_default,
            is_early_adopter,
            name,
            onboarding_tasks,
            open_membership,
            pending_access_requests,
            projects,
            quota,
            require2_fa,
            safe_fields,
            scrape_java_script,
            scrub_ip_addresses,
            sensitive_fields,
            slug,
            status: Box::new(status),
            store_crash_reports,
            teams,
            trusted_relays,
        }
    }
}
