/*
 * API Reference
 *
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RetrieveAProject200Response {
    #[serde(rename = "allowedDomains")]
    pub allowed_domains: Vec<String>,
    #[serde(rename = "avatar")]
    pub avatar: Box<crate::models::ListAnOrganizationSTeams200ResponseInnerAvatar>,
    #[serde(rename = "color")]
    pub color: String,
    #[serde(rename = "dataScrubber")]
    pub data_scrubber: bool,
    #[serde(rename = "dataScrubberDefaults")]
    pub data_scrubber_defaults: bool,
    #[serde(rename = "dateCreated")]
    pub date_created: String,
    #[serde(rename = "defaultEnvironment", deserialize_with = "Option::deserialize")]
    pub default_environment: Option<String>,
    #[serde(rename = "digestsMaxDelay")]
    pub digests_max_delay: i32,
    #[serde(rename = "digestsMinDelay")]
    pub digests_min_delay: i32,
    #[serde(rename = "features")]
    pub features: Vec<String>,
    #[serde(rename = "firstEvent", deserialize_with = "Option::deserialize")]
    pub first_event: Option<String>,
    #[serde(rename = "hasAccess")]
    pub has_access: bool,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "isBookmarked")]
    pub is_bookmarked: bool,
    #[serde(rename = "isInternal")]
    pub is_internal: bool,
    #[serde(rename = "isMember")]
    pub is_member: bool,
    #[serde(rename = "isPublic")]
    pub is_public: bool,
    #[serde(rename = "latestRelease", deserialize_with = "Option::deserialize")]
    pub latest_release: Option<Box<crate::models::RetrieveAProject200ResponseLatestRelease>>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "options")]
    pub options: Box<crate::models::RetrieveAProject200ResponseOptions>,
    #[serde(rename = "organization")]
    pub organization: Box<crate::models::RetrieveATeam200ResponseOrganization>,
    #[serde(rename = "platform", deserialize_with = "Option::deserialize")]
    pub platform: Option<String>,
    #[serde(rename = "platforms")]
    pub platforms: Vec<String>,
    #[serde(rename = "plugins", skip_serializing_if = "Option::is_none")]
    pub plugins: Option<Vec<crate::models::RetrieveAProject200ResponsePluginsInner>>,
    #[serde(rename = "processingIssues")]
    pub processing_issues: i32,
    #[serde(rename = "relayPiiConfig", deserialize_with = "Option::deserialize")]
    pub relay_pii_config: Option<String>,
    #[serde(rename = "resolveAge")]
    pub resolve_age: i32,
    #[serde(rename = "safeFields")]
    pub safe_fields: Vec<String>,
    #[serde(rename = "scrapeJavaScript")]
    pub scrape_java_script: bool,
    #[serde(rename = "scrubIPAddresses")]
    pub scrub_ip_addresses: bool,
    #[serde(rename = "securityToken")]
    pub security_token: String,
    #[serde(rename = "securityTokenHeader", deserialize_with = "Option::deserialize")]
    pub security_token_header: Option<String>,
    #[serde(rename = "sensitiveFields")]
    pub sensitive_fields: Vec<String>,
    #[serde(rename = "slug")]
    pub slug: String,
    #[serde(rename = "status")]
    pub status: String,
    #[serde(rename = "storeCrashReports", deserialize_with = "Option::deserialize")]
    pub store_crash_reports: Option<bool>,
    #[serde(rename = "subjectPrefix")]
    pub subject_prefix: String,
    #[serde(rename = "subjectTemplate")]
    pub subject_template: String,
    #[serde(rename = "team")]
    pub team: Box<crate::models::ListATeamSProjects200ResponseInnerTeam>,
    #[serde(rename = "teams")]
    pub teams: Vec<crate::models::ListATeamSProjects200ResponseInnerTeam>,
    #[serde(rename = "verifySSL")]
    pub verify_ssl: bool,
}

impl RetrieveAProject200Response {
    pub fn new(allowed_domains: Vec<String>, avatar: crate::models::ListAnOrganizationSTeams200ResponseInnerAvatar, color: String, data_scrubber: bool, data_scrubber_defaults: bool, date_created: String, default_environment: Option<String>, digests_max_delay: i32, digests_min_delay: i32, features: Vec<String>, first_event: Option<String>, has_access: bool, id: String, is_bookmarked: bool, is_internal: bool, is_member: bool, is_public: bool, latest_release: Option<crate::models::RetrieveAProject200ResponseLatestRelease>, name: String, options: crate::models::RetrieveAProject200ResponseOptions, organization: crate::models::RetrieveATeam200ResponseOrganization, platform: Option<String>, platforms: Vec<String>, processing_issues: i32, relay_pii_config: Option<String>, resolve_age: i32, safe_fields: Vec<String>, scrape_java_script: bool, scrub_ip_addresses: bool, security_token: String, security_token_header: Option<String>, sensitive_fields: Vec<String>, slug: String, status: String, store_crash_reports: Option<bool>, subject_prefix: String, subject_template: String, team: crate::models::ListATeamSProjects200ResponseInnerTeam, teams: Vec<crate::models::ListATeamSProjects200ResponseInnerTeam>, verify_ssl: bool) -> RetrieveAProject200Response {
        RetrieveAProject200Response {
            allowed_domains,
            avatar: Box::new(avatar),
            color,
            data_scrubber,
            data_scrubber_defaults,
            date_created,
            default_environment,
            digests_max_delay,
            digests_min_delay,
            features,
            first_event,
            has_access,
            id,
            is_bookmarked,
            is_internal,
            is_member,
            is_public,
            latest_release: if let Some(x) = latest_release {Some(Box::new(x))} else {None},
            name,
            options: Box::new(options),
            organization: Box::new(organization),
            platform,
            platforms,
            plugins: None,
            processing_issues,
            relay_pii_config,
            resolve_age,
            safe_fields,
            scrape_java_script,
            scrub_ip_addresses,
            security_token,
            security_token_header,
            sensitive_fields,
            slug,
            status,
            store_crash_reports,
            subject_prefix,
            subject_template,
            team: Box::new(team),
            teams,
            verify_ssl,
        }
    }
}


