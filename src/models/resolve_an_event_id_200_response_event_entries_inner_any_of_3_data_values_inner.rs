/*
 * API Reference
 *
 * Sentry Public API
 *
 * The version of the OpenAPI document: v0
 * Contact: partners@sentry.io
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ResolveAnEventId200ResponseEventEntriesInnerAnyOf3DataValuesInner {
    #[serde(rename = "stacktrace", deserialize_with = "Option::deserialize")]
    pub stacktrace: Option<Box<crate::models::ResolveAnEventId200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace>>,
    #[serde(rename = "module", deserialize_with = "Option::deserialize")]
    pub module: Option<String>,
    #[serde(rename = "rawStacktrace", deserialize_with = "Option::deserialize")]
    pub raw_stacktrace: Option<serde_json::Value>,
    #[serde(rename = "mechanism", deserialize_with = "Option::deserialize")]
    pub mechanism: Option<Box<crate::models::ResolveAnEventId200ResponseEventEntriesInnerAnyOf3DataValuesInnerMechanism>>,
    #[serde(rename = "threadId", deserialize_with = "Option::deserialize")]
    pub thread_id: Option<String>,
    #[serde(rename = "value")]
    pub value: String,
    #[serde(rename = "type")]
    pub r#type: String,
}

impl ResolveAnEventId200ResponseEventEntriesInnerAnyOf3DataValuesInner {
    pub fn new(stacktrace: Option<crate::models::ResolveAnEventId200ResponseEventEntriesInnerAnyOf3DataValuesInnerStacktrace>, module: Option<String>, raw_stacktrace: Option<serde_json::Value>, mechanism: Option<crate::models::ResolveAnEventId200ResponseEventEntriesInnerAnyOf3DataValuesInnerMechanism>, thread_id: Option<String>, value: String, r#type: String) -> ResolveAnEventId200ResponseEventEntriesInnerAnyOf3DataValuesInner {
        ResolveAnEventId200ResponseEventEntriesInnerAnyOf3DataValuesInner {
            stacktrace: if let Some(x) = stacktrace {Some(Box::new(x))} else {None},
            module,
            raw_stacktrace,
            mechanism: if let Some(x) = mechanism {Some(Box::new(x))} else {None},
            thread_id,
            value,
            r#type,
        }
    }
}


